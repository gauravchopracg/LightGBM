name: Solaris CRAN check

on:
  push:
    branches: 
      - solaris_ci

jobs:
  test:
    name: solaris-cran
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container: rocker/r-base
    env:
      SECRETS_WORKFLOW: ${{ secrets.WORKFLOW }}
    steps:
      - name: Install essential software before checkout
        shell: bash
        run: |
          apt-get update
          apt-get install --no-install-recommends -y \
            curl \
            git
      - name: Checkout repository
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 5
          submodules: true
      - name: Build package
        shell: bash
        id: build_package
        run: |
          sh build-cran-package.sh || exit -1
          apt-get install --no-install-recommends -y \
              libcurl4-openssl-dev \
              libxml2-dev \
              libssl-dev
          cat > run_rhub.R <<EOF
          package_tarball <- paste0("lightgbm_", readLines("VERSION.txt")[1], ".tar.gz")
          install.packages('rhub', dependencies = c('Depends', 'Imports', 'LinkingTo'), repos = 'https://cran.r-project.org')
          rhub::validate_email(
              email = 'lightgbm_test_email@mailinator.com'
              , token = '2b4aa567fbfa4b3584da21f3e4578baf'
          )
          res_object <- rhub::check(
              path = package_tarball
              , email = "lightgbm_test_email@mailinator.com"
              , check_args = "--as-cran"
              , platform = c(
                  "solaris-x86-patched"
                  , "solaris-x86-patched-ods"
              )
              , env_vars = c(
                  "R_COMPILE_AND_INSTALL_PACKAGES" = "always"
                  , "_R_CHECK_SYSTEM_CLOCK_" = 0
                  , "_R_CHECK_CRAN_INCOMING_REMOTE_" = 0
                  , "_R_CHECK_PKG_SIZES_THRESHOLD_" = 60
              )
          )
          statuses <- res_object[[".__enclos_env__"]][["private"]][["status_"]]
          result <- do.call(rbind, lapply(statuses, function(thisStatus) {
              data.frame(
                  plaform = thisStatus[["platform"]][["name"]]
                  , errors = length(thisStatus[["result"]][["errors"]])
                  , warnings = length(thisStatus[["result"]][["warnings"]])
                  , notes = length(thisStatus[["result"]][["notes"]])
                  , stringsAsFactors = FALSE
              )
          }))
          print(result)
          quit(save = "no", status = colSums(result[2L:4L]))
          EOF
          Rscript run_rhub.R || exit -1
